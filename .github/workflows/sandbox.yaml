name: ~ Sandbox
on:
  workflow_dispatch:
  push:
    paths-ignore:
      - dummy.txt
    branches:
      - master

permissions:
  id-token: write # This is required for requesting OIDC token
  contents: write
  
jobs:
  doThis:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: false
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const thisWorkflowRun = await github.rest.actions.getWorkflowRun({
              ...context.repo,
              run_id: context.runId,
            }).then((res) => res.data)
            
            console.log('thisWorkflowRun', {
              name: thisWorkflowRun.name,
              workflow_id: thisWorkflowRun.workflow_id,
              id: thisWorkflowRun.id,
              run_number: thisWorkflowRun.run_number,
              run_attempt: thisWorkflowRun.run_attempt,
            })
            
            const thisWorkflowRunJobs = await github.rest.actions.listJobsForWorkflowRunAttempt({
              ...context.repo,
              run_id: thisWorkflowRun.id,
              attempt_number: thisWorkflowRun.run_attempt ?? 1,
            }).then((res) => res.data.jobs)
            
            const thisWorkflowRunJob = thisWorkflowRunJobs.find((job) => job.name === context.job)
            
            console.log('thisWorkflowRunJob', thisWorkflowRunJob)
            
            const recentWorkflowRuns = await github.rest.actions.listWorkflowRuns({
              ...context.repo,
              workflow_id: thisWorkflowRun.workflow_id,
            }).then((res) => res.data.workflow_runs)
            
            let mostRecentWorkflowRun = recentWorkflowRuns[0]
            for (const run of recentWorkflowRuns) {
              mostRecentWorkflowRun = run
              if (mostRecentWorkflowRun.id === thisWorkflowRun.id) {
                break
              }
            
              const runJob = await github.rest.actions.getJobForWorkflowRun({
                ...context.repo,
                job_id: mostRecentWorkflowRun.id,
              }).then((res) => res.data)
              if (runJob.status !== 'queued') {
                break
              }
            }
            
            console.log('recentWorkflowRun', {
              name: mostRecentWorkflowRun.name,
              workflow_id: mostRecentWorkflowRun.workflow_id,
              id: mostRecentWorkflowRun.id,
              run_number: mostRecentWorkflowRun.run_number,
              run_attempt: mostRecentWorkflowRun.run_attempt,
            })
