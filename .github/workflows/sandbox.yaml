name: ~ Sandbox
on:
  workflow_dispatch:
  push:
    paths-ignore:
      - dummy.txt
    branches:
      - master

permissions:
  id-token: write # This is required for requesting OIDC token
  contents: write
  
jobs:
  doThis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          date > dummy.txt
          git add dummy.txt
      - uses: actions/github-script@v7
        with:
          script: |
            async function execCommand(command) {
                const result = {stdout: '', stderr: ''}
                await exec.exec(command, null, {
                    listeners: {
                        stdout(data) {
                            result.stdout += data.toString()
                        },
                        stderr(data) {
                            result.stderr += data.toString()
                        },
                    },
                })
                return result
            }
            
            const repositoryNameWithOwner = await execCommand('git remote get-url --push origin')
                .then(({stdout}) => stdout.trim().replace(/.*?([^/:]+\/[^/]+?)(?:\.git)?$/, '$1'))
            
            const branchName = await execCommand('git branch --show-current')
                .then(({stdout}) => stdout.trim())
            
            const expectedHeadOid = await execCommand('git rev-parse HEAD')
                .then(({stdout}) => stdout.trim())
            
            const fileChanges = {
                additions: await execCommand('git diff --cached --name-only --diff-filter=AM')
                    .then(({stdout}) => stdout.split("\n"))
                    .then((paths) => paths.map((path) => ({
                        path,
                        contents: fs.readFileSync(path).toString('base64'),
                    }))),
                deletions: await execCommand('git diff --cached --name-only --diff-filter=D')
                    .then(({stdout}) => stdout.split("\n"))
                    .then((paths) => paths.map((path) => ({path}))),
            }
            
            const message = {
                headline: "Sign me!",
                body: "This is a commit message",
            }
            
            const input = {
                branch: {
                    repositoryNameWithOwner,
                    branchName,
                },
                expectedHeadOid,
                fileChanges,
                message,
            }
            
            console.info('input', {
                ...input,
                fileChanges: {
                    additions: input.fileChanges.additions.map(({path}) => path),
                    deletions: input.fileChanges.deletions,
                }
            })
            
            const commit = await github.graphql(`mutation ($input: CreateCommitOnBranchInput!) {
                createCommitOnBranch(input: $input) {
                    commit {
                        oid
                        url
                    }
                }
            }`, {input})
            
            console.log('commit', commit)

            
      - run: |
          # git commit -m "work work"
          # git push
          
 
   
